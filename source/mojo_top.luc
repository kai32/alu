module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_conditioner0;
    button_conditioner button_conditioner1;
    button_conditioner button_conditioner2;
    button_conditioner button_conditioner3;
    .rst(rst) {
      addsub addsub;
      comparator comparator;
      boolean boolean;
      shifter shifter;
    }
  }
  
  var a;
  var b;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    a = 33;
    b = 4;
    
    button_conditioner0.in = io_button[0]; // for use in testing to switch alufn0 value
    button_conditioner1.in = io_button[1]; // for use in testing to switch alufn1 value
    button_conditioner2.in = io_button[2]; // for use in testing to switch alufn2 value
    button_conditioner3.in = io_button[3]; // for use in testing to switch alufn2 value
    
    addsub.alufn0 = button_conditioner0.out; // wire up alufn0
    addsub.a = a;
    addsub.b = b;
    io_led[0] = addsub.s;
    
    comparator.alufn1 = button_conditioner1.out;
    comparator.alufn2 = button_conditioner2.out;
    comparator.a = a;
    comparator.b = b;
    io_led[1] = comparator.out;
    
    boolean.alufn3210 = c{button_conditioner3.out,button_conditioner2.out,button_conditioner1.out,button_conditioner0.out};
    boolean.a = a;
    boolean.b = b;
    io_led[2] = boolean.out;
    
    shifter.alufn10 = c{button_conditioner1.out, button_conditioner0.out};
    shifter.a = a;
    shifter.b = b;
    io_led[1] = shifter.out;
  }
}