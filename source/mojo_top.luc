module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield

  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    .rst(rst) {
      addsub addsub;
      comparator comparator;
      boolean boolean;
      shifter shifter;
      mul mul;
    }
  }
  
  sig a[8];
  sig b[8];  
  sig alufn[6];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    a = io_dip[0];
    b = io_dip[1];
    alufn = io_dip[2][5:0];
    
    io_led[0] = a;
    io_led[1] = b;
    
    
    addsub.alufn0 = alufn[0]; // wire up alufn0
    addsub.a = a;
    addsub.b = b;

    
    comparator.alufn1 = alufn[1];
    comparator.alufn2 = alufn[2];
    comparator.a = a;
    comparator.b = b;
    // io_led[1] = comparator.out;
    
    boolean.alufn3210 = alufn[3:0];
    boolean.a = a;
    boolean.b = b;
    // io_led[2] = boolean.out;
    
    shifter.alufn10 = alufn[1:0];
    shifter.a = a;
    shifter.b = b;
    // io_led[1] = shifter.out;
    
    mul.a = a;
    mul.b = b;
    // led = mul.out;
    

    case (alufn[5:4]) {
      0: // 0 is for add
        if (alufn[0]== 0){
          io_led[2] = addsub.s;
        } else {
          io_led[2] = mul.out;
        }
      1: // 1 is for boole
        io_led[2] = boolean.out;
      2:
        io_led[2] = shifter.out;
      3: 
        io_led[2] = comparator.out;
    }
  }
}