module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield

  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_conditioner;
    .rst(rst) {
      trigger trigger;
      tester tester;
    }
  }
  
  alu alu;
  
  sig a[8];
  sig b[8];  
  sig alufn[6];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4h0;           // select all digits
    
    // my code begins here
    button_conditioner.in = io_button[1]; // use to start automatic testing
    tester.trigger = trigger.out; // wire up trigger for timing
    tester.button = button_conditioner.out; // wire up button
    
    a = tester.a; // use a from tester as a for alu
    b = tester.b; // use b from tester as b for alu
    alufn = tester.alufn; // use alufn from tester as alufn for alu
    io_seg = ~tester.out; // display test status
    
    io_led[0] = a; // display current a 
    io_led[1] = b; // display current b
    io_led[2][5:0] = alufn; // display current alufn
     
    //wire up alu
    alu.a = a;
    alu.b = b;
    alu.alufn = alufn;
    
    tester.detected = alu.out;
    led = alu.out; // display alu output
    
    

  }
}